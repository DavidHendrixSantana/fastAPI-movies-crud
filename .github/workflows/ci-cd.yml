name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run tests with coverage
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=80 -v

    - name: Upload coverage reports as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/

  build:
    needs: [test]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t movies-crud-api:${{ github.sha }} .
        docker build -t movies-crud-api:latest .

    - name: Test Docker image
      run: |
        docker run -d --name test-container -p 8000:8000 movies-crud-api:${{ github.sha }}
        sleep 30
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/ || exit 1
        docker stop test-container
        docker rm test-container

    - name: Log in to Docker Hub (only on main/master)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push to Docker Hub (only on main/master)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        docker tag movies-crud-api:latest ${{ secrets.DOCKER_USERNAME }}/movies-crud-api:latest
        docker tag movies-crud-api:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/movies-crud-api:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/movies-crud-api:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/movies-crud-api:${{ github.sha }}

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Deploy notification
      run: |
        echo "‚úÖ Deployment successful!"
        echo "üê≥ Docker image: movies-crud-api:${{ github.sha }}"
        echo "üöÄ Ready for production deployment"
        